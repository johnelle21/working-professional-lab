#include <stdio.h>
#include <stdlib.h>

struct Process{
    int pid;
    int arrive;
    int burst;
    int pri;
    int stime;
    int etime;
    int TT;
    int WT;
    int RT;
};

void SortArrival(struct Process p[], int n);
void FCFS(struct Process p[], int n);
void SJF(struct Process p[], int n);
void NPP(struct Process p[], int n);
void print_table(struct Process p[], int n);

int main(void) {// the user is beeing asked to enter the number of processes
    int n=0, i=0, a=0, b=0, c=0;
    printf("Enter no. of processes : ");
    scanf("%d",&n);
    struct Process p[n];

    for (i=0;i<n;i++) {
        printf("\nEnter arrival time  for process P%d: ",i); 
        scanf("%d", &a);
         printf("\nEnter arrival burst for process P%d: ",i);
        scanf("%d", &b);
        p[i].pid = i;
        p[i].arrive = a;
        p[i].burst = b;
        p[i].pri = rand()% 3 + 0;
    }
    
    SortArrival(p, n);
    printf("\nEnter 1: FCFS\nEnter 2: SJF\nEnter 3: NP Priority\n");
    scanf("%d", &c);
    if (c == 1) { FCFS(p, n); }
    if (c == 2) { SJF(p, n); }
    if (c == 3) { NPP(p, n); }
}

void SortArrival (struct Process p[], int n)
{
    int x,y;
    struct Process temp;

    for (x=0; x<n-1; x++) {
       for (y=0; y<(n-1-x);y++) { //completes this loop before it goes back outside and does another cyycle of the first loop
            if (p[y].arrive > p[y + 1].arrive) {
                temp = p[y];
                p[y] = p[y + 1];
                p[y + 1] = temp; //goes to next item in the list e
            }
        }
    }
}

void FCFS(struct Process p[], int n)
{
    int i, B, S=p[0].arrive;

    for (i=0;i<n;i++){
        if (p[i].arrive > S) {
            S=p[i].arrive; p[i].stime = S;
        } else {
            p[i].stime = S;
        }
        B=p[i].burst; B+=S; p[i].etime = B;
        p[i].TT = p[i].etime - p[i].arrive;
        p[i].RT = p[i].WT = p[i].TT - p[i].burst;
        S = p[i].etime;
    }
    print_table(p, n);
}

void SJF(struct Process p[], int n)
{
    int x, y, i, B, sum=0, S=p[0].arrive;
    struct Process temp;

    for (x=0; x<n; x++) {
       sum+=p[x].burst;
       p[x].stime=-1;
    }

    for (x=0; x<n-1; x++) {// number of processes - 1
       for (y=0; y<(n-1-x);y++) {
            if (p[y].burst > p[y + 1].burst) {
                temp = p[y];
                p[y] = p[y + 1];
                p[y + 1] = temp;
            }
        } 

    }

    while (S < sum)
    {
        for (i=0;i<n;i++) {
            if (p[i].arrive <= S && p[i].stime == -1) {
                p[i].stime = S;
                B=p[i].burst; B+=S; p[i].etime = B;
                p[i].TT = p[i].etime - p[i].arrive;
                p[i].RT = p[i].WT = p[i].TT - p[i].burst;
                S = p[i].etime; break;
            }
        }
    }
    SortArrival(p, n);
    print_table(p, n);
}

void NPP(struct Process p[], int n)
{
    int x, y, i, B, sum=0, S=p[0].arrive;
    struct Process temp;

    for (x=0; x<n; x++) {
       sum+=p[x].burst;
       p[x].stime=-1;
    }

    for (x=0; x<n-1; x++) {
       for (y=0; y<(n-1-x);y++) {
            if (p[y].pri > p[y + 1].pri) {
                temp = p[y];
                p[y] = p[y + 1];
                p[y + 1] = temp;
            }
        }

    }

    while (S < sum)
    {
        for (i=0;i<n;i++) {
            if (p[i].arrive <= S && p[i].stime == -1) {
                p[i].stime = S;
                B=p[i].burst; B+=S; p[i].etime = B;
                p[i].TT = p[i].etime - p[i].arrive;
                p[i].RT = p[i].WT = p[i].TT - p[i].burst;
                S = p[i].etime; break;
            }
        }
    }
    SortArrival(p, n);
    print_table(p, n);
}

void print_table(struct Process p[], int n)
{
    int i;

    puts("+-----+--------+-------+----------+-------+-------+------+------+------+");
    puts("| PID | Arrive | Burst | Priority | Start |  End  |  TT  |  WT  |  RT  |");
    puts("+-----+--------+-------+----------+-------+-------+------+------+------+");

    for(i=0; i<n; i++) {
        printf("| %2d  |   %2d   |  %2d   |    %2d    |  %2d   |   %2d  | %2d   | %2d   | %2d   |\n"
               , p[i].pid, p[i].arrive, p[i].burst, p[i].pri, p[i].stime, p[i].etime, p[i].TT, p[i].WT, p[i].RT );
        puts("+-----+--------+-------+----------+-------+-------+------+------+------+");
    }

}
